{
	"name": "df_ComplexXML",
	"properties": {
		"folder": {
			"name": "XML"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_COMPLEX_XML_1",
						"type": "DatasetReference"
					},
					"name": "sourceXML"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_CSV",
						"type": "DatasetReference"
					},
					"name": "sinkBlobBookLanguage"
				},
				{
					"dataset": {
						"referenceName": "DS_CSV",
						"type": "DatasetReference"
					},
					"name": "sinkBlobBookType"
				},
				{
					"dataset": {
						"referenceName": "DS_ASQL",
						"type": "DatasetReference"
					},
					"name": "sinkASQLType"
				},
				{
					"dataset": {
						"referenceName": "DS_ASQL",
						"type": "DatasetReference"
					},
					"name": "sinkASQLLanguage"
				}
			],
			"transformations": [
				{
					"name": "flattenLanguages"
				},
				{
					"name": "flattenType"
				}
			],
			"scriptLines": [
				"source(output(",
				"          catalog as (book as ({@id} as string, author as string, description as string, genre as string, languages as (language as string[]), price as double, publish_date as date, title as string, types as ({_value_} as string, type as string[]))[])",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     validationMode: 'none',",
				"     namespaces: true,",
				"     wildcardPaths:[('File3.xml')]) ~> sourceXML",
				"sourceXML foldDown(unroll(catalog.book.languages.language, catalog.book.languages.language),",
				"     mapColumn(",
				"          language = catalog.book.languages.language,",
				"          author = catalog.book.author,",
				"          title = catalog.book.title",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenLanguages",
				"sourceXML foldDown(unroll(catalog.book.types.type),",
				"     mapColumn(",
				"          type = catalog.book.types.type,",
				"          price = catalog.book.price,",
				"          title = catalog.book.title",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenType",
				"flattenLanguages sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[('filelang.csv')],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkBlobBookLanguage",
				"flattenType sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[('filetype.csv')],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkBlobBookType",
				"flattenType sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          c1 as string,",
				"          c2 as string,",
				"          c3 as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkASQLType",
				"flattenLanguages sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          c1 as string,",
				"          c2 as string,",
				"          c3 as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkASQLLanguage"
			]
		}
	}
}